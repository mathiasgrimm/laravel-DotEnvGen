<?php 

namespace MathiasGrimm\LaravelDotEnvGen;

use Illuminate\Console\Command;
use Illuminate\Support\Collection;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Output\StreamOutput;
use Throwable;

class DotEnvGenCommand extends Command
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'env:gen';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generates a `.env.gen` file based on environment variables used throughout the project.';

    /**
     * @var \Symfony\Component\Console\Helper\ProgressBar
     */
    protected $progressBar;

    /**
     * @var Collection|string[]
     */
    protected $files;

    /**
     * @var array
     */
    protected $all = [];

    /**
     * @var array
     */
    protected $found = [];

    /**
     * @var array
     */
    protected $defined = [];

    /**
     * @var array
     */
    protected $defaults = [];

    /**
     * @var FileScanner
     */
    private $fileScanner;

    /**
     * @var EnvFinder
     */
    private $envFinder;

    /**
     * @var EnvDefinition[]|Collection
     */
    private $envCalls;
    
    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle(FileScanner $filesScanner, EnvFinder $envFinder)
    {
        ini_set('memory_limit', config('dotenvgen.memory_limit'));
        
        $this->fileScanner = $filesScanner;
        $this->envFinder = $envFinder;
        $this->envCalls = collect();
        $this->defined = collect();
        
        $this->gatherFiles();
        $this->scanFiles();
        $this->scanEnv();
        $this->generateFile();
        $this->info('Done. Results:');
        $this->showResults();

        $this->info('By Laravel Dot Env Generator - https://github.com/mathiasgrimm/laravel-dot-env-gen');
    }

    protected function gatherFiles()
    {
        $this->info('Gathering PHP files...');
        $this->info('You can speed up this process by excluding folders. Check the README for more info.');

        $this->files = $this->fileScanner->getFiles();
    }

    protected function scanFiles()
    {
        $count = count($this->files);

        $this->info("Scanning $count files...");

        $this->progressBar = new ProgressBar($this->output, $count);
        $this->progressBar->start();

        foreach ($this->files as $file) {
            $this->progressBar->advance();
            
            if ($envCalls = $this->envFinder->findInFile($file)) {
                $this->envCalls = $this->envCalls->merge($envCalls);
            }    
        }

        $this->progressBar->finish();
    }

    protected function scanEnv()
    {
        $this->info('Scanning `.env` file...');

        if (!file_exists(base_path('.env'))) {
            return;
        }

        foreach (file(base_path('.env')) as $line) {
            if (strpos(trim($line), '#') === 0 || strpos($line, '=') === false) {
                continue;
            }

            [$name, $value] = array_map('trim', explode('=', $line, 2));

            $this->defined[] = new EnvDefinition($name, null, '.env', $value);
        }
    }

    protected function generateFile()
    {
        $this->info('Generating `.env.gen` file...');

        $this->all = $this->envCalls->merge($this->defined->values());
        
        $content = '';

        $groups = $this->all->keyBy('name')->keys()->groupBy(function ($name) {
            return explode('_', $name)[0]; 
        })->sortKeys();
        
        $content .= "# file generated by mathiasgrimm/laravel-dot-env-gen at " . now()->toDateTimeString() . "\n\n";
        
        foreach ($groups as $groupName => $variables) {
            $content .= "# {$groupName}\n";
            foreach ($variables as $name) {
                $content .= "{$name}=" . getenv($name) . "\n";
            }
            
            $content .= "\n";
        }

        file_put_contents(base_path('.env.gen'), $content);
    }

    protected function showResults()
    {
        $fp = fopen('.env.out', 'w+');
        $table = new Table(new StreamOutput($fp));

        $table->setHeaders([
            'Name',
            'In .env',
            'In source',
            'Current Runtime Value',
            'Default',
            'Files',
        ]);

        $rows = [];

        $variables = $this->all->keyBy('name')->keys();
        $defined = $this->defined->keyBy('name')->keys();
        $found = $this->envCalls->keyBy('name')->keys();
        $defaults = $this->all->groupBy('name');
        
        foreach ($variables as $name) {
            $row = [$name];

            if ($defined->search($name)) {
                $row[] = 'Yes';
            } else {
                $row[0] = "<question>$name</question>";
                $row[]  = '<error>No</error>';
            }

            if ($found->search($name)) {
                $row[] = 'Yes';
            } else {
                $row[0] = "<question>$name</question>";
                $row[]  = '<comment>No</comment>';
            }

            $default = $defaults[$name]->where('file', '!=', '.env')->map(function ($item) {
                return $item->default;
            })->unique()->filter()->toArray();
            
            $row[] = getenv($name);
            $row[]  = implode(', ', $default);
            $row[]  = implode(', ', $this->envCalls->where('name', $name)->map(function ($item) {
                return basename($item->file);
            })->filter()->unique()->toArray());
            $rows[] = $row;
        }

        $table->setRows($rows);
        
        $table->render();
    }
}
